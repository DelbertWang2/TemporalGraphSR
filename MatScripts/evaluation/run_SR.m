% This script is for runing and evaluating the proposed Super resolution method. 
% This script should be launched after the '\Data\trained_data.mat' or '\Data\trained_data_omittednode.mat'
% are already generated by the GCN in python scripts. 

% For reviews, the '\Data\trained_data.mat' are also uploaded in the
% attachment, so you can run this scripts without retraining the GCN

% run /init.m before this script to initialize path

clear;


% if set load_answers=true, this script will load the pre-calculated answer and
% jump to plotting figures.
load_answers = true; 


mpc = case33bw_modi;
BBM = cal_BBM(mpc);
nbranch = size(mpc.branch, 1);
label = '_temporal';
trained_data = load('..//..//Data//trained_data');


% uncomment these two lines for SR when some nodes' measurements are
% completely missing. (chapter 4.3). trained_data_omittednode.mat are not
% included in the attachment because the attachment size is limited to 100 MB

% label = '_temporal_spatial';
% trained_data = load('..//..//Data//trained_data_omittednodes'); 




rawdata = load('..//..//Data//rawdata');
[nsample, nbus, nt] = size(trained_data.trained.pi);

% nsample determines how many tests to perform. There are maximum 1000
% tests stored in the '\Data\trained_data.mat', if you want a quick
% glance, you can set a small value, e.g., nsample = 10
nsample = 10;


if ~load_answers
    %% load the truthvalue
    truthvalue.plineF = zeros(nsample, nbranch, nt);
    for is = 1:nsample
        for it = 1:nt
            truthvalue.plineF(is, :, it) = BBM\reshape(trained_data.label_test.pi(is, :, it), [], 1);
        end
    end
    truthvalue.vm(1:nsample,:,:) = trained_data.label_test.vm(1:nsample,:,:);

    %% pass the result of GCN through state estimation

    bran_map.plineF = 14;
    bran_map.qlineF = 15;
    bran_map.plineT = 16;
    bran_map.qlineF = 17;
    bus_map.pd = 3;
    bus_map.qd = 4; 
    bus_map.vm = 8; 
    bus_map.va = 9; 

    for is = 1:nsample
        for it = 1:nt
            plineF = BBM\(trained_data.trained.pi(is,:,it)');
            vm = trained_data.trained.vm(is,:,it)';
            idx.idx_zPF = [1:32]'; % ?????
            idx.idx_zPT = [];
            idx.idx_zPG = [1];
            idx.idx_zVa = [];
            idx.idx_zQF = [];
            idx.idx_zQT = [];
            idx.idx_zQG = [];
            idx.idx_zVm = [1:33]'; % ?????

            % specify measurements
            measure.PF = plineF;
            measure.PT = [];
            measure.PG = plineF(1);
            measure.Va = [];
            measure.QF = [];
            measure.QT = [];
            measure.QG = [];
            measure.Vm = vm;

            % specify measurement variances
            sigma.sigma_PF = 0.02;
            sigma.sigma_PT = [];
            sigma.sigma_PG = 0.001;
            sigma.sigma_Va = [];
            sigma.sigma_QF = [];
            sigma.sigma_QT = [];
            sigma.sigma_QG = [];
            sigma.sigma_Vm = 0.02;

            % check input data integrity
            nbus = 33;
            nbus = 33;
            [success, measure, idx, sigma] = checkDataIntegrity(measure, idx, sigma, nbus);
            if ~success
                error('State Estimation input data are not complete or sufficient!');
            end

            % run state estimation
            casename = 'case33bw_modi.m';
            type_initialguess = 2; % flat start
            [baseMVA, bus, gen, branch, success, et, z, z_est, error_sqrsum] = run_se(casename, measure, idx, sigma, type_initialguess);
            plineF_SR(is, :, it) = branch(:, bran_map.plineF) / 100;  % SEï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿?100ï¿½ï¿½
            vm_SR(is, :, it) = bus(:, bus_map.vm);
        end
    end

    for is = 1:nsample
        for it = 1:nt
            plineF = BBM\(trained_data.trained.pi(is,:,it)');
            vm = trained_data.trained.vm(is,:,it)';
            plineF_SR(is, :, it) = plineF;
            vm_SR(is, :, it) = vm;
        end
    end

    SR.plineF = plineF_SR;
    SR.vm = vm_SR;
    result_SR = evaluate(SR, truthvalue, nsample);
    save(['result_SR' label],'result_SR','SR','truthvalue')
else
    load(['result_SR' label])
end

%% plot figures
figure(2)
    width=1200;
    height=400;
    left=200;
    bottem=100;
    set(gcf,'position',[left,bottem,width,height])
    subplot(1,3,1)
        b = reshape(SR.vm(1,:,:),33,[]);
        imagesc(b)
        colorbar('southoutside')
        caxis([0.90 1])
        title('(a) SR' )
        xlabel('Time')
        ylabel('Node number')
        set(gca, 'xtick', [1,8:8:64])
        set(gca, 'ytick', [1,5:5:30,33])
        set(gca, 'fontname', 'times')

    subplot(1,3,2)
        b = reshape(trained_data.label_test.vm(1,:,:),33,[]);
        imagesc(b)
        colorbar('southoutside')
        caxis([0.90 1])
        title('(b) HTR labels' )
        xlabel('Time')
        ylabel('Node number')
        set(gca, 'xtick', [1,8:8:64])
        set(gca, 'ytick', [1,5:5:30,33])
        set(gca, 'fontname', 'times')

    
        
    subplot(1,3,3)
        b = reshape(trained_data.feature_test.vm(1,:,:),33,[]);
        imagesc(b)
        colorbar('southoutside')
        caxis([0.90 1])
        title('(c) LTR inputs' )
        xlabel('Time')
        ylabel('Node number')
        set(gca, 'xtick', [1,8:8:64])
        set(gca, 'ytick', [1,5:5:30,33])
        set(gca, 'fontname', 'times')

t_begin = 1;
t_end = 32;
v_range = [0.94 0.98];
p_range = [0.05 0.6];


figure(3)
    width=250;
    height=450;
    left=200;
    bottem=100;
    set(gcf,'position',[left,bottem,width,height])
    display_bus = 10;
    
    subplot(3,1,1)
        y = reshape (SR.vm(1,display_bus,:), 1, []);
        x = 1:length(y);
        plot(x, y, '-k.')
        title('(a.1) SR ')
        xlim([t_begin t_end])
        ylim(v_range)
        ylabel('$V_m$ (p.u.)', 'interp','latex')
        set(gca, 'fontname', 'times')
        
   subplot(3,1,2)
        y = reshape (truthvalue.vm(1,display_bus,:), 1, []);
        x = 1:length(y);
        plot(x, y, '-k.')
        title('(a.2) HTR labels')
        xlim([t_begin t_end])
        ylim(v_range)
        ylabel('$V_m$ (p.u.)', 'interp','latex')
        set(gca, 'fontname', 'times')
        
   subplot(3,1,3)
        idx = trained_data.ava_idx{display_bus}+1;
        y = reshape (trained_data.feature_test.vm(1,10,idx), 1, []);
        x = idx;
        plot(x, y, '-k.')
        title('(a.3) LTR inputs')
        xlim([t_begin t_end])
        ylim(v_range)
        ylabel('$V_m$ (p.u.)', 'interp','latex')
        xlabel('Time')
        set(gca, 'fontname', 'times')
        
        
        
 figure(4)
    width=250;
    height=450;
    left=200;
    bottem=100;
    set(gcf,'position',[left,bottem,width,height])
    display_bus = 30;
    subplot(3,1,1)
        y = reshape (SR.vm(1,display_bus,:), 1, []);
        x = 1:length(y);
        plot(x, y, '-k.')
        title('(b.1) SR ')
        xlim([t_begin t_end])
        ylim(v_range)
        ylabel('$V_m$ (p.u.)', 'interp','latex')
        set(gca, 'fontname', 'times')
        
   subplot(3,1,2)
        y = reshape (truthvalue.vm(1,display_bus,:), 1, []);
        x = 1:length(y);
        plot(x, y, '-k.')
        title('(b.2) HTR labels')
        xlim([t_begin t_end])
        ylim(v_range)
        ylabel('$V_m$ (p.u.)', 'interp','latex')
        set(gca, 'fontname', 'times')
        
   subplot(3,1,3)
        idx = trained_data.ava_idx{display_bus}+1;
        y = reshape (trained_data.feature_test.vm(1,10,idx), 1, []);
        x = idx;
        plot(x, y, '-k.')
        title('(b.3) LTR inputs')
        xlim([t_begin t_end])
        ylim(v_range)
        ylabel('$V_m$ (p.u.)', 'interp','latex')
        xlabel('Time')
        set(gca, 'fontname', 'times')
        
        
 figure(5)
    width=250;
    height=450;
    left=200;
    bottem=100;
    set(gcf,'position',[left,bottem,width,height])
    display_bus = 10;
    subplot(3,1,1)
        y = reshape (SR.plineF(1,display_bus,:), 1, []);
        x = 1:length(y);
        plot(x, y, '-k.')
        title('(c.1) SR')
        xlim([t_begin t_end])
        ylim(p_range)
        ylabel('$P_{\rm lf}$ (MW)', 'interp','latex')
        set(gca, 'fontname', 'times')
        
   subplot(3,1,2)
        y = reshape (truthvalue.plineF(1,display_bus,:), 1, []);
        x = 1:length(y);
        plot(x, y, '-k.')
        title('(c.2) HTR labels')
        xlim([t_begin t_end])
        ylim(p_range)
        ylabel('$P_{\rm lf}$ (MW)', 'interp','latex')
        set(gca, 'fontname', 'times')
        
   subplot(3,1,3)
        idx = trained_data.ava_idx{display_bus}+1;
        y = reshape (truthvalue.plineF(1,display_bus,idx), 1, []);
        x = idx;
        plot(x, y, '-k.')
        title('(c.3) LTR inputs')
        xlim([t_begin t_end])
        ylim(p_range)
        ylabel('$P_{\rm lf}$ (MW)', 'interp','latex')
        xlabel('Time')
        set(gca, 'fontname', 'times')
        
 figure(6)
    width=250;
    height=450;
    left=200;
    bottem=100;
    set(gcf,'position',[left,bottem,width,height])
    display_bus = 30;
    subplot(3,1,1)
        y = reshape (SR.plineF(1,display_bus,:), 1, []);
        x = 1:length(y);
        plot(x, y, '-k.')
        title('(d.1) SR')
        xlim([t_begin t_end])
        ylim(p_range)
        ylabel('$P_{\rm lf}$ (MW)', 'interp','latex')
        set(gca, 'fontname', 'times')
        
   subplot(3,1,2)
        y = reshape (truthvalue.plineF(1,display_bus,:), 1, []);
        x = 1:length(y);
        plot(x, y, '-k.')
        title('(d.2) HTR labels')
        xlim([t_begin t_end])
        ylim(p_range)
        ylabel('$P_{\rm lf}$ (MW)', 'interp','latex')
        set(gca, 'fontname', 'times')
        
   subplot(3,1,3)
        idx = trained_data.ava_idx{display_bus}+1;
        y = reshape (truthvalue.plineF(1,display_bus,idx), 1, []);
        x = idx;
        plot(x, y, '-k.')
        title('(d.3) LTR inputs')
        xlim([t_begin t_end])
        ylim(p_range)
        ylabel('$P_{\rm lf}$ (MW)', 'interp','latex')
        xlabel('Time')
        set(gca, 'fontname', 'times')
        
        
        
disp('----------------------Method: Super resolution---------------------')
disp(['MSE of voltage magnitude: '  num2str(mean(result_SR.vm_mse))])    
disp(['MSE of active line power flow: ' num2str(mean(result_SR.plineF_mse))])
disp(['MSE overall: ' num2str(mean(result_SR.overall_mse))])   
